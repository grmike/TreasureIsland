<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>Остров сокровищ</title>
    <style type="text/css">
    
        #map {width: 100%;}
        #map table {margin: auto;}
        #map table td {width: 50px; height: 50px; border: 1px black solid; }
    </style>
    <script src="jquery-1.6.2.min.js" type="text/javascript"></script>
    <script type="text/javascript">

        var Map = function () {
        }

        $.extend(Map.prototype, {

            init: function () {
                this.fields = this.getFields();
            },
            getFields: function () {

                var fields = {};
                var i, j;
                for (i = 1; i < 12; i++) {
                    fields[i] = {};
                    for (j = 1; j < 12; j++) {
                        fields[i][j] = new MapField('Green', CONST_GROUND_AREA, "pics/grass.gif");
                    }
                }
                fields[0] = {};
                fields[12] = {};

                for (i = 0; i < 13; i++) {
                    fields[0][i] = new MapField('Blue', CONST_SEA_AREA, "pics/sea.gif");
                    fields[12][i] = new MapField('Blue', CONST_SEA_AREA, "pics/sea.gif");
                    fields[i][0] = new MapField('Blue', CONST_SEA_AREA, "pics/sea.gif");
                    fields[i][12] = new MapField('Blue', CONST_SEA_AREA, "pics/sea.gif");
                }

                fields[1][1] = new MapField('Blue', CONST_SEA_AREA, "pics/sea.gif");
                fields[1][11] = new MapField('Blue', CONST_SEA_AREA, "pics/sea.gif");
                fields[11][1] = new MapField('Blue', CONST_SEA_AREA, "pics/sea.gif");
                fields[11][11] = new MapField('Blue', CONST_SEA_AREA, "pics/sea.gif");

                return fields;
            },
            draw: function (mapId) {

                var mapElm = $('#' + mapId);
                if (typeof (mapElm) == 'undefined') return;

                var table = $('<table style="border: 1px black solid;"></table>');
                mapElm.append(table);
                for (var i = 0; i < 13; i++) {
                    var tr = $('<tr></tr>');
                    table.append(tr);
                    for (var j = 0; j < 13; j++) {
                        var td = $('<td><img /></td>');
                        this.fields[i][j].setView(td);
                        this.fields[i][j].unselect();
                        tr.append(td);
                    }
                }
            },
            addTips: function () {
                for (var i = 0; i < 13; i++) {
                    for (var j = 0; j < 13; j++) {
                        var field = this.fields[i][j];
                        field.viewElement.click(field, function (event) {

                            //alert(event.data.color);
                            var field = event.data;
                            if (field.object != null) {
                                // если щелкнули по объекту - то выделяем его
                                if (currentObject != null) currentObject.unselect();
                                currentObject = field.object;
                                currentObject.select();
                            }
                            else if (currentObject != null) {
                                // если щелкнули по пустому полю - перемещаем туда объект
                                if (currentObject.canMove(field)) {
                                    currentObject.undraw();
                                    field.addObject(currentObject);
                                    currentObject.draw();
                                }
                                else alert('Нельзя переместить сюда объект');
                            }
                        });
                    }
                }
            }
        });

        var CONST_SEA_AREA = 1;
        var CONST_GROUND_AREA = 2;
        var CONST_ALL_AREA = 3;

        var MapField = function (color, area, img) {
            this.color = color
            this.object = null;
            this.area = area;
            this.pic = img;
        }

        $.extend(MapField.prototype, {
            setView: function (elm) {
                this.viewElement = elm;
            },
            addObject: function (obj) {
                this.object = obj;
                obj.bindToField(this);
            },
            removeObject: function () {
                this.object = null;
                this.draw(this.object);
            },
            select: function () {
                this.viewElement.css("backgroundImage", "").css("backgroundColor", "red");
            },
            unselect: function () {
                if (typeof (this.pic) == 'undefined') this.viewElement.css("backgroundColor", this.color);
                else this.viewElement.css("backgroundImage", "url("+this.pic+")");
            },
            draw: function (img) {
                if (typeof (img) == 'undefined') {
                    this.viewElement.children().first().removeAttr("src");
                }
                else {
                    this.viewElement.children().first().attr("src", img);
                }
            }
        });


        var Car = function() {
            return new MovingObject("pics/ship2.gif", CONST_GROUND_AREA);
        }
        var Chucha = function() {
            return new MovingObject("pics/chucha.gif", CONST_GROUND_AREA);
        }
        var Deer = function() {
            return new MovingObject("pics/deer.gif", CONST_GROUND_AREA);
        }
        var Warrior = function() {
            return new MovingObject("pics/warrior.gif", CONST_GROUND_AREA);
        }
        var Ship = function() {
            return new MovingObject("pics/ship.gif", CONST_SEA_AREA);
        }

        var MovingObject = function (picPath, area) {
            this.selected = false;
            this.area = area;
            this.pic = picPath;
        }

        $.extend(MovingObject.prototype, {

            bindToField: function (field) {
                this.field = field;
            },
            canMove: function(field) {
                return this.area == field.area;
            },
            draw: function () {
                this.field.draw(this.pic);
                if (this.selected) this.field.select();
            },
            undraw: function () {
                this.field.removeObject();
                this.field.draw();
                if (this.selected) this.field.unselect();
            },
            select: function () {
                this.selected = true;
                this.field.select();
            },
            unselect: function () {
                this.selected = false;
                this.field.unselect();
            },

        });


        var currentObject = null;

        $(document).ready(function () {

            var map = new Map();
            map.init();
            map.draw('map');
            map.addTips();

            var ship, obj, i;
            for (i=0 ; i< 6 ; ++i) {
            
                ship = new Ship();
                map.fields[i*2][0].addObject(ship);
                ship.draw();
            }

            currentObject = ship;
            currentObject.select();

            for (i=0 ; i< 6 ; ++i) {
            
                obj = new Warrior();
                map.fields[i*2+1][3].addObject(obj);
                obj.draw();
            }
            obj = new Chucha();
            map.fields[5][3].addObject(obj);
            obj.draw();

            obj = new Chucha();
            map.fields[7][10].addObject(obj);
            obj.draw();

            obj = new Deer();
            map.fields[3][8].addObject(obj);
            obj.draw();

            obj = new Deer();
            map.fields[9][3].addObject(obj);
            obj.draw();
        });
        
    </script>
</head>
<body>
<h1>Остров сокровищ</h1>
<img />
<div id="map"></div>

</body>
</html>
