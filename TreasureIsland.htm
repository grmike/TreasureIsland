<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title>Остров сокровищ</title>
    <style type="text/css">
    
        #map {width: 100%;}
        #map table {margin: auto;}
        #map table td {width: 50px; height: 50px; border: 1px black solid; }
    </style>
    <script src="jquery-2.0.2.min.js" type="text/javascript"></script>
    <script src="gamemap-1.0.0.js" type="text/javascript"></script>
    <script src="mapfields-1.0.0.js" type="text/javascript"></script>
    <script src="mobjects-1.0.0.js" type="text/javascript"></script>
    <script type="text/javascript">



        var FieldBehavior = function (map, x, y) {
            this.map = map;
            this.x = x;
            this.y = y;
        }

        $.extend(FieldBehavior.prototype, {
            getPathFields: function () {
                if (typeof (this.pathfields) == "undefined") {
                    var self = this;
                    self.pathfields = {};
                    var t = this.getMovingFields();
                    t.forEach(function (element, index) {
                        var each = self.map.getField(self, element);
                        if (typeof (each) != "undefined") self.pathfields[each.name] = each;
                    });
                }
                return this.pathfields;
            },
            showMovingFields: function (area) {
                var flds = this.getPathFields();
                for (var each in flds) {
                    if (flds[each].area == area) flds[each].view.selectForMove();
                }
            },
            unshowMovingFields: function () {
                var flds = this.getPathFields();
                for (var each in flds) {
                    flds[each].view.unselectForMove();
                }
            },
            getMovingFields: function () {
                return ["up", "down", "left", "right", "left-up", "left-down", "right-up", "right-down"];
            }
        });



        var ViewField = function (elm, pic, color) {
            this.elm = elm;
            this.pic = pic;
            this.color = color;
        }

        $.extend(ViewField.prototype, {

            drawField: function () {
                if (typeof (this.pic) == 'undefined') this.elm.css("backgroundColor", this.color);
                else this.elm.css("backgroundImage", "url(" + this.pic + ")").css("opacity", "1");
            },
            selectObject: function () {
                this.elm.css("backgroundImage", "").css("backgroundColor", "red").css("opacity", "0.8");
            },
            unselectObject: function () {
                this.drawField();
            },
            selectForMove: function () {
                this.elm.css("opacity", "0.8");
            },
            unselectForMove: function () {
                this.elm.css("opacity", "1");
            },
            drawObject: function (objectPicture) {
                $(":first-child", this.elm).attr("src", objectPicture);
            },
            undrawObject: function () {
                $(":first-child", this.elm).attr("src", "pics/empty.gif");
            }
        });

        var currentObject = null;

        $(document).ready(function () {

            $(document).keypress(function (event) {
                if (event.keyCode == 38) {
                    if (currentObject != null) currentObject.move("up");
                }
                else if (event.keyCode == 40) {
                    if (currentObject != null) currentObject.move("down");
                }
                else if (event.keyCode == 37) {
                    if (currentObject != null) currentObject.move("left");
                }
                else if (event.keyCode == 39) {
                    if (currentObject != null) currentObject.move("right");
                }

            });

            var map = new Map();
            map.init();
            map.draw('map');
            map.addEventHandlers();

            var ship, obj, i;
            for (i = 0; i < 6; ++i) {

                ship = new Ship();
                map.fields[i * 2][0].addObject(ship);
                ship.draw();
            }

            currentObject = ship;
            currentObject.select();

            for (i = 0; i < 6; ++i) {

                obj = new Warrior();
                map.fields[i * 2 + 1][3].addObject(obj);
                obj.draw();
            }
            obj = new Chucha();
            map.fields[5][3].addObject(obj);
            obj.draw();

            obj = new Chucha();
            map.fields[7][10].addObject(obj);
            obj.draw();

            obj = new Deer();
            map.fields[3][8].addObject(obj);
            obj.draw();

            obj = new Deer();
            map.fields[9][3].addObject(obj);
            obj.draw();
        });
        
    </script>
</head>
<body>
<h1>Остров сокровищ</h1>
<img />
<div id="map"></div>
<div style="width: 50px; height: 50px; background-color: black;">
<img src="pics/rocks.gif" style="float: left; position: relative; opacity: 0.8;"/>
</div>
<br/>
<br/>
<br/>
<br/>
<img src="pics/sea.gif" style="float: left; position: relative; left: -50px; opacity: 0.5;"/>
</body>
</html>
